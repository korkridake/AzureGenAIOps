name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  AZURE_WEBAPP_NAME: 'genai-ops-app'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  # Azure authentication (from GitHub secrets)
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_KEY_VAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Lint with flake8
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src tests
    
    - name: Type check with mypy
      run: |
        mypy src
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: bandit-report.json

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Retrieve secrets from Key Vault
      id: keyvault
      run: |
        echo "Retrieving secrets from Key Vault..."
        
        # Get Key Vault name
        KV_NAME="${{ secrets.AZURE_KEY_VAULT_NAME }}"
        
        if [ -n "$KV_NAME" ]; then
          echo "Using Key Vault: $KV_NAME"
          
          # Retrieve secrets and set as environment variables for this job
          echo "AZURE_OPENAI_ENDPOINT=$(az keyvault secret show --vault-name $KV_NAME --name openai-endpoint --query value -o tsv)" >> $GITHUB_ENV
          echo "AZURE_SEARCH_ENDPOINT=$(az keyvault secret show --vault-name $KV_NAME --name search-endpoint --query value -o tsv)" >> $GITHUB_ENV
          
          # Set masked environment variables for sensitive data
          OPENAI_KEY=$(az keyvault secret show --vault-name $KV_NAME --name openai-api-key --query value -o tsv)
          SEARCH_KEY=$(az keyvault secret show --vault-name $KV_NAME --name search-api-key --query value -o tsv)
          
          echo "::add-mask::$OPENAI_KEY"
          echo "::add-mask::$SEARCH_KEY"
          echo "AZURE_OPENAI_API_KEY=$OPENAI_KEY" >> $GITHUB_ENV
          echo "AZURE_SEARCH_API_KEY=$SEARCH_KEY" >> $GITHUB_ENV
          
          echo "✅ Secrets retrieved from Key Vault"
        else
          echo "⚠️ No Key Vault configured, using GitHub secrets"
          echo "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "AZURE_SEARCH_API_KEY=${{ secrets.AZURE_SEARCH_API_KEY }}" >> $GITHUB_ENV
        fi
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }} .
        echo ${{ secrets.AZURE_REGISTRY_PASSWORD }} | docker login ${{ secrets.AZURE_REGISTRY_URL }} -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin
        docker tag ${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }} ${{ secrets.AZURE_REGISTRY_URL }}/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}
        docker push ${{ secrets.AZURE_REGISTRY_URL }}/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ secrets.AZURE_REGISTRY_URL }}/${{ env.AZURE_WEBAPP_NAME }}:${{ github.sha }}
    
    - name: Deploy Azure ML Pipeline
      run: |
        python scripts/deploy_ml_pipeline.py
      env:
        # These are now set from Key Vault in the previous step
        AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
        AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
        # Key Vault secrets are available as environment variables
        AZURE_OPENAI_API_KEY: ${{ env.AZURE_OPENAI_API_KEY }}
        AZURE_SEARCH_API_KEY: ${{ env.AZURE_SEARCH_API_KEY }}